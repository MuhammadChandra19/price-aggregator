// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package publisher is a generated GoMock package.
package publisher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	publisher "github.com/muhammadchandra19/price-aggregator/market-data-fetcher/module/publisher"
)

// MockMarketPublisher is a mock of MarketPublisher interface.
type MockMarketPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockMarketPublisherMockRecorder
}

// MockMarketPublisherMockRecorder is the mock recorder for MockMarketPublisher.
type MockMarketPublisherMockRecorder struct {
	mock *MockMarketPublisher
}

// NewMockMarketPublisher creates a new mock instance.
func NewMockMarketPublisher(ctrl *gomock.Controller) *MockMarketPublisher {
	mock := &MockMarketPublisher{ctrl: ctrl}
	mock.recorder = &MockMarketPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketPublisher) EXPECT() *MockMarketPublisherMockRecorder {
	return m.recorder
}

// CloseEvent mocks base method.
func (m *MockMarketPublisher) CloseEvent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseEvent")
}

// CloseEvent indicates an expected call of CloseEvent.
func (mr *MockMarketPublisherMockRecorder) CloseEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseEvent", reflect.TypeOf((*MockMarketPublisher)(nil).CloseEvent))
}

// PublishEvent mocks base method.
func (m *MockMarketPublisher) PublishEvent(payload publisher.PublisherRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockMarketPublisherMockRecorder) PublishEvent(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockMarketPublisher)(nil).PublishEvent), payload)
}
