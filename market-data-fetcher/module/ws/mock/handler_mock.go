// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package ws is a generated GoMock package.
package ws

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	module "github.com/muhammadchandra19/price-aggregator/market-data-fetcher/module"
)

// MockWebsocketHandler is a mock of WebsocketHandler interface.
type MockWebsocketHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketHandlerMockRecorder
}

// MockWebsocketHandlerMockRecorder is the mock recorder for MockWebsocketHandler.
type MockWebsocketHandlerMockRecorder struct {
	mock *MockWebsocketHandler
}

// NewMockWebsocketHandler creates a new mock instance.
func NewMockWebsocketHandler(ctrl *gomock.Controller) *MockWebsocketHandler {
	mock := &MockWebsocketHandler{ctrl: ctrl}
	mock.recorder = &MockWebsocketHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketHandler) EXPECT() *MockWebsocketHandlerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockWebsocketHandler) Connect(endpoint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", endpoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockWebsocketHandlerMockRecorder) Connect(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockWebsocketHandler)(nil).Connect), endpoint)
}

// Disconnect mocks base method.
func (m *MockWebsocketHandler) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockWebsocketHandlerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockWebsocketHandler)(nil).Disconnect))
}

// ReadJSON mocks base method.
func (m *MockWebsocketHandler) ReadJSON(message interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJSON", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadJSON indicates an expected call of ReadJSON.
func (mr *MockWebsocketHandlerMockRecorder) ReadJSON(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJSON", reflect.TypeOf((*MockWebsocketHandler)(nil).ReadJSON), message)
}

// WriteJSON mocks base method.
func (m *MockWebsocketHandler) WriteJSON(message interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteJSON", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteJSON indicates an expected call of WriteJSON.
func (mr *MockWebsocketHandlerMockRecorder) WriteJSON(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteJSON", reflect.TypeOf((*MockWebsocketHandler)(nil).WriteJSON), message)
}

// MockWebSocketFeed is a mock of WebSocketFeed interface.
type MockWebSocketFeed struct {
	ctrl     *gomock.Controller
	recorder *MockWebSocketFeedMockRecorder
}

// MockWebSocketFeedMockRecorder is the mock recorder for MockWebSocketFeed.
type MockWebSocketFeedMockRecorder struct {
	mock *MockWebSocketFeed
}

// NewMockWebSocketFeed creates a new mock instance.
func NewMockWebSocketFeed(ctrl *gomock.Controller) *MockWebSocketFeed {
	mock := &MockWebSocketFeed{ctrl: ctrl}
	mock.recorder = &MockWebSocketFeedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebSocketFeed) EXPECT() *MockWebSocketFeedMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockWebSocketFeed) Read() (*module.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(*module.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockWebSocketFeedMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockWebSocketFeed)(nil).Read))
}

// Subscribe mocks base method.
func (m *MockWebSocketFeed) Subscribe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockWebSocketFeedMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWebSocketFeed)(nil).Subscribe))
}

// TurnOff mocks base method.
func (m *MockWebSocketFeed) TurnOff() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TurnOff")
	ret0, _ := ret[0].(error)
	return ret0
}

// TurnOff indicates an expected call of TurnOff.
func (mr *MockWebSocketFeedMockRecorder) TurnOff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnOff", reflect.TypeOf((*MockWebSocketFeed)(nil).TurnOff))
}
