// Code generated by MockGen. DO NOT EDIT.
// Source: market_handler.go

// Package market is a generated GoMock package.
package market

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	market "github.com/muhammadchandra19/price-aggregator/market-data-service/module/market"
)

// MockMarketHandlerUsecase is a mock of MarketHandlerUsecase interface.
type MockMarketHandlerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMarketHandlerUsecaseMockRecorder
}

// MockMarketHandlerUsecaseMockRecorder is the mock recorder for MockMarketHandlerUsecase.
type MockMarketHandlerUsecaseMockRecorder struct {
	mock *MockMarketHandlerUsecase
}

// NewMockMarketHandlerUsecase creates a new mock instance.
func NewMockMarketHandlerUsecase(ctrl *gomock.Controller) *MockMarketHandlerUsecase {
	mock := &MockMarketHandlerUsecase{ctrl: ctrl}
	mock.recorder = &MockMarketHandlerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketHandlerUsecase) EXPECT() *MockMarketHandlerUsecaseMockRecorder {
	return m.recorder
}

// GetMarketPrice mocks base method.
func (m *MockMarketHandlerUsecase) GetMarketPrice(arg0 context.Context, arg1 string) ([]market.MarketPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketPrice", arg0, arg1)
	ret0, _ := ret[0].([]market.MarketPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketPrice indicates an expected call of GetMarketPrice.
func (mr *MockMarketHandlerUsecaseMockRecorder) GetMarketPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketPrice", reflect.TypeOf((*MockMarketHandlerUsecase)(nil).GetMarketPrice), arg0, arg1)
}
